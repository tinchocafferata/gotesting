version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.0.0
jobs:
 build:
  docker:
   - image: circleci/golang:1.10
     
  steps:
   - checkout
   - setup_remote_docker
   #These environment variables are made available by CircleCI, either natively or
   #due to them being set in the project properties
   - run: echo ${CIRCLE_PROJECT_USERNAME} #Value is masked
   - run: echo ${DOCKER_REPO} #Value is masked
   - run: echo ${CIRCLE_PROJECT_REPONAME} #Value is masked
   #This one is already present in the container, most probably because it comes with the local installation of GO
   - run: echo ${GOPATH} #Resolves to /go
   
   ####################################################################################
   #This one is shown when invoking "go env", but from the system it is not set
   #- run: echo ${GOROOT} #Not set, prints empty value but should point to /usr/local/go
   
   # Each step is run under its own bash command, so the value is not available to other steps if done like this
   # - run: export GOROOT="/usr/local/go"
  
  # One method of carrying environment variables to other steps is to save them on a file
   # $BASH_ENV is just a file that runs when the a bash session starts, so we append the export command
   # Refer to the docs for details on this: https://circleci.com/docs/2.0/env-vars/
   - run: echo 'export GOROOT="/usr/local/go"' >> $BASH_ENV
   - run: echo ${GOROOT} #Now resolves to /usr/local/go
   - run: echo $BASH_ENV
   ####################################################################################

   - run: go env
      # GOBIN=""
      # GOCACHE="/home/circleci/.cache/go-build"
      # GOEXE=""
      # GOHOSTARCH="amd64"
      # GOHOSTOS="linux"
      # GOOS="linux"
      # GOPATH="/go"
      # GORACE=""
      # GOROOT="/usr/local/go"
      # GOTMPDIR=""
      # GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"

   - run: ls ${GOROOT}/bin
   - run: ls -l ${GOPATH} #Folder has "bin" and "src" subfolders, but are empty
   - run: which go #Resolves to /usr/local/go/bin/go
   
   ####################################################################################
   #Start setting the env vars that they invoicer used
   
   - run: echo 'export GOPATH_HEAD="$(echo ${GOPATH}|cut -d ':' -f 1)"' >> $BASH_ENV
   - run: echo ${GOPATH_HEAD} #Gets assigned the same value as $GOPATH
   
   - run: echo 'export GOPATH_BASE="${GOPATH_HEAD}/src/github.com/${CIRCLE_PROJECT_USERNAME}"' >> $BASH_ENV
   - run: echo ${GOPATH_BASE} #Resolves to /go/src/github.com/tinchocafferata
   
   - run: echo 'export DOCKER_REPO="$(if [ ${CIRCLE_PROJECT_USERNAME} == 'Securing-DevOps' ]; then echo securingdevops; else echo $DOCKER_USER; fi)"' >> $BASH_ENV
   - run: echo ${DOCKER_REPO}
   
   #/go/src was an empty folder, so we create the subdirectories to the path /go/src/github.com/tinchocafferata
   - run: mkdir -p "${GOPATH_BASE}"
   
   #/go/bin was an empty folder. The command creates the bin folder but it was already there (argument -p  prevents failure when directory already exists)
   - run: mkdir -p "${GOPATH_HEAD}/bin"
   
   - run: go get github.com/govend/govend
   - run: ls "${GOPATH_HEAD}/src/github.com" #We should see govend there
   
   - run: mv * ${GOPATH_BASE}
   - run: cd ${GOPATH_BASE} && go build main.go #Runs correctly
   - run: cd ${GOPATH_BASE} && govend -u #Runs correctly
   
   #- run:
   #    name: Test dependencies are up to date
   #    command: 'GOPATH="${GOPATH_HEAD}"; ( cd ${GOPATH_BASE} && govend -u --prune && git diff --quiet )'
